The DNS injection approach involved intercepting DNS queries using Scapy and crafting forged DNS responses to redirect traffic to an attacker-controlled IP. 
The script captured DNS queries, extracted key fields like transaction IDs and ports, and determined if the domain should be hijacked based on a predefined hostname file. 
Using a ThreadPoolExecutor, I efficiently handled parallel brute-force attempts to increase the chances of winning the race condition against legitimate DNS responses. 
For testing, I used the `dig` utility within my host system to generate DNS requests and ran the program to observe packets on the same interface the queries were made on. 
I verified that the script successfully intercepted DNS queries and injected forged responses, leading to the redirection of DNS traffic to the attacker-controlled IP.

Resources used:

1. Lecture slide explaining Kaminsky attack.
2. https://scapy.readthedocs.io/en/latest/api/scapy.layers.dns.html
3. https://courses.cs.duke.edu//fall16/compsci356/DNS/DNS-primer.pdf
4. https://pytutorial.com/python-how-to-use-tldextract-with-examples/
